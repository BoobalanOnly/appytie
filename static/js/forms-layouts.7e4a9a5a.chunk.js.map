{"version":3,"sources":["components/common/CustomSelectInput.js","../node_modules/reactstrap/es/FormText.js","views/app/ui/forms/layouts.js","containers/navs/Breadcrumb.js"],"names":["CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","propTypes","children","PropTypes","node","inline","bool","tag","tagPropType","color","string","className","cssModule","object","FormText","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","selectData","label","value","key","injectIntl","match","intl","useState","selectedOptionLO","setSelectedOptionLO","selectedOptionLT","setSelectedOptionLT","startDateLO","setStartDateLO","startDateLT","setStartDateLT","tagsLO","setTagsLO","tagsLT","setTagsLT","messages","xxs","heading","id","for","type","name","placeholder","row","sm","check","disabled","onChange","val","inputProps","selected","components","classNamePrefix","options","shouldCloseOnSelect","getMenuTitle","sub","adminRoot","getUrl","path","split","BreadcrumbItems","substr","paths","length","indexOf","filter","x","map","index","active","to","BreadcrumbContainer"],"mappings":"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","file":"static/js/forms-layouts.7e4a9a5a.chunk.js","sourcesContent":["import React from 'react';\nimport { components } from 'react-select';\n\nconst CustomSelectInput = (props) => {\n  const customProps = { ...props };\n  delete customProps.autoCorrect;\n  delete customProps.autoCapitalize;\n  return <components.Input {...customProps} />;\n};\n\nexport default CustomSelectInput;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'small',\n  color: 'muted'\n};\n\nvar FormText = function FormText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      inline = props.inline,\n      color = props.color,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"inline\", \"color\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, !inline ? 'form-text' : false, color ? \"text-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormText.propTypes = propTypes;\nFormText.defaultProps = defaultProps;\nexport default FormText;","import React, { useState } from 'react';\nimport {\n  Row,\n  Card,\n  CardBody,\n  Input,\n  CardTitle,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  FormText,\n  Form,\n} from 'reactstrap';\nimport { injectIntl } from 'react-intl';\n\nimport DatePicker from 'react-datepicker';\nimport TagsInput from 'react-tagsinput';\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport 'rc-switch/assets/index.css';\nimport 'rc-slider/assets/index.css';\nimport 'react-rater/lib/react-rater.css';\n\nimport Select from 'react-select';\nimport {\n  Colxx,\n  Separator,\n} from '../../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../../containers/navs/Breadcrumb';\n\nimport IntlMessages from '../../../../helpers/IntlMessages';\nimport CustomSelectInput from '../../../../components/common/CustomSelectInput';\n\nconst selectData = [\n  { label: 'Cake', value: 'cake', key: 0 },\n  { label: 'Cupcake', value: 'cupcake', key: 1 },\n  { label: 'Dessert', value: 'dessert', key: 2 },\n];\n\nconst FormLayoutsUi = ({ match, intl }) => {\n  const [selectedOptionLO, setSelectedOptionLO] = useState('');\n  const [selectedOptionLT, setSelectedOptionLT] = useState('');\n  const [startDateLO, setStartDateLO] = useState(null);\n  const [startDateLT, setStartDateLT] = useState(null);\n  const [tagsLO, setTagsLO] = useState([]);\n  const [tagsLT, setTagsLT] = useState([]);\n\n  const { messages } = intl;\n\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.form-layouts\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n      <Row className=\"mb-4\">\n        <Colxx xxs=\"12\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <IntlMessages id=\"forms.basic\" />\n              </CardTitle>\n              <Form>\n                <FormGroup>\n                  <Label for=\"exampleEmail\">\n                    <IntlMessages id=\"forms.email\" />\n                  </Label>\n                  <Input\n                    type=\"email\"\n                    name=\"email\"\n                    id=\"exampleEmail\"\n                    placeholder={messages['forms.email']}\n                  />\n                  <FormText color=\"muted\">\n                    <IntlMessages id=\"forms.email-muted\" />\n                  </FormText>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"passwordBasic\">\n                    <IntlMessages id=\"forms.password\" />\n                  </Label>\n                  <Input\n                    type=\"password\"\n                    name=\"passwordBasic\"\n                    id=\"passwordBasic\"\n                    placeholder={messages['forms.password']}\n                  />\n                </FormGroup>\n\n                <FormGroup>\n                  <CustomInput\n                    type=\"checkbox\"\n                    id=\"exampleCustomCheckbox\"\n                    label=\"Check this custom checkbox\"\n                  />\n                </FormGroup>\n\n                <Button color=\"primary\" className=\"mt-4\">\n                  <IntlMessages id=\"forms.submit\" />\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Colxx xxs=\"12\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <IntlMessages id=\"forms.horizontal\" />\n              </CardTitle>\n              <Form>\n                <FormGroup row>\n                  <Label for=\"emailHorizontal\" sm={2}>\n                    <IntlMessages id=\"forms.email\" />\n                  </Label>\n                  <Colxx sm={10}>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      id=\"emailHorizontal\"\n                      placeholder={messages['forms.email']}\n                    />\n                  </Colxx>\n                </FormGroup>\n\n                <FormGroup row>\n                  <Label for=\"passwordHorizontal\" sm={2}>\n                    <IntlMessages id=\"forms.password\" />\n                  </Label>\n                  <Colxx sm={10}>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      id=\"passwordHorizontal\"\n                      placeholder={messages['forms.password']}\n                    />\n                  </Colxx>\n                </FormGroup>\n\n                <FormGroup row>\n                  <Label sm={2} className=\"pt-0\">\n                    <IntlMessages id=\"forms.radios\" />\n                  </Label>\n                  <Colxx sm={10}>\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"radio1\" />\n                        <IntlMessages id=\"forms.first-radio\" />\n                      </Label>\n                    </FormGroup>\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"radio\" name=\"radio1\" />\n                        <IntlMessages id=\"forms.second-radio\" />\n                      </Label>\n                    </FormGroup>\n                    <FormGroup check disabled>\n                      <Label check>\n                        <Input type=\"radio\" name=\"radio1\" disabled />\n                        <IntlMessages id=\"forms.third-radio-disabled\" />\n                      </Label>\n                    </FormGroup>\n                  </Colxx>\n                </FormGroup>\n\n                <FormGroup row>\n                  <Label sm={2} className=\"pt-0\">\n                    <IntlMessages id=\"forms.checkbox\" />\n                  </Label>\n                  <Colxx sm={10}>\n                    <FormGroup check>\n                      <Label check>\n                        <Input type=\"checkbox\" name=\"check1\" /> Example\n                        <IntlMessages id=\"forms.checkbox\" />\n                      </Label>\n                    </FormGroup>\n                  </Colxx>\n                </FormGroup>\n\n                <Button color=\"primary\">\n                  <IntlMessages id=\"forms.signin\" />\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Colxx xxs=\"12\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <IntlMessages id=\"forms.top-labels-over-line\" />\n              </CardTitle>\n\n              <Form>\n                <Label className=\"form-group has-float-label\">\n                  <Input type=\"email\" />\n                  <span>\n                    <IntlMessages id=\"forms.email\" />\n                  </span>\n                </Label>\n                <Label className=\"form-group has-float-label\">\n                  <Input type=\"password\" />\n                  <span>\n                    <IntlMessages id=\"forms.password\" />\n                  </span>\n                </Label>\n                <div className=\"form-group has-float-label\">\n                  <TagsInput\n                    value={tagsLO}\n                    onChange={(val) => setTagsLO(val)}\n                    inputProps={{ placeholder: '' }}\n                  />\n                  <span>\n                    <IntlMessages id=\"forms.tags\" />\n                  </span>\n                </div>\n                <div className=\"form-group has-float-label\">\n                  <DatePicker\n                    selected={startDateLO}\n                    onChange={(val) => setStartDateLO(val)}\n                  />\n                  <span>\n                    <IntlMessages id=\"forms.date\" />\n                  </span>\n                </div>\n\n                <div className=\"form-group has-float-label\">\n                  <Select\n                    components={{ Input: CustomSelectInput }}\n                    className=\"react-select\"\n                    classNamePrefix=\"react-select\"\n                    name=\"form-field-name\"\n                    value={selectedOptionLO}\n                    onChange={(val) => setSelectedOptionLO(val)}\n                    options={selectData}\n                    placeholder=\"\"\n                  />\n                  <span>\n                    <IntlMessages id=\"forms.state\" />\n                  </span>\n                </div>\n\n                <Button color=\"primary\">\n                  <IntlMessages id=\"forms.submit\" />\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Colxx xxs=\"12\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <IntlMessages id=\"forms.top-labels-in-input\" />\n              </CardTitle>\n\n              <Form>\n                <FormGroup className=\"form-group has-top-label\">\n                  <Label>\n                    <IntlMessages id=\"forms.email-u\" />\n                  </Label>\n                  <Input type=\"email\" />\n                </FormGroup>\n\n                <FormGroup className=\"form-group has-top-label\">\n                  <Label>\n                    <IntlMessages id=\"forms.password-u\" />\n                  </Label>\n\n                  <Input type=\"password\" />\n                </FormGroup>\n\n                <FormGroup className=\"form-group has-top-label\">\n                  <Label>\n                    <IntlMessages id=\"forms.tags-u\" />\n                  </Label>\n                  <TagsInput\n                    value={tagsLT}\n                    onChange={(val) => setTagsLT(val)}\n                    inputProps={{ placeholder: '' }}\n                  />\n                </FormGroup>\n                <FormGroup className=\"form-group has-top-label\">\n                  <Label>\n                    <IntlMessages id=\"forms.date-u\" />\n                  </Label>\n                  <DatePicker\n                    shouldCloseOnSelect\n                    selected={startDateLT}\n                    onChange={(val) => setStartDateLT(val)}\n                  />\n                </FormGroup>\n\n                <FormGroup className=\"form-group has-top-label\">\n                  <Label>\n                    <IntlMessages id=\"forms.state-u\" />\n                  </Label>\n                  <Select\n                    components={{ Input: CustomSelectInput }}\n                    className=\"react-select\"\n                    classNamePrefix=\"react-select\"\n                    name=\"form-field-name\"\n                    value={selectedOptionLT}\n                    onChange={(val) => setSelectedOptionLT(val)}\n                    options={selectData}\n                    placeholder=\"\"\n                  />\n                </FormGroup>\n\n                <Button color=\"primary\">\n                  <IntlMessages id=\"forms.submit\" />\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n\n      <Row className=\"mb-4\">\n        <Colxx xxs=\"12\">\n          <Card>\n            <CardBody>\n              <CardTitle>\n                <IntlMessages id=\"forms.grid\" />\n              </CardTitle>\n              <Form>\n                <FormGroup row>\n                  <Colxx sm={6}>\n                    <FormGroup>\n                      <Label for=\"exampleEmailGrid\">\n                        <IntlMessages id=\"forms.email\" />\n                      </Label>\n                      <Input\n                        type=\"email\"\n                        name=\"exampleEmailGrid\"\n                        id=\"exampleEmailGrid\"\n                        placeholder={messages['forms.email']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={6}>\n                    <FormGroup>\n                      <Label for=\"examplePasswordGrid\">\n                        <IntlMessages id=\"forms.password\" />\n                      </Label>\n                      <Input\n                        type=\"password\"\n                        name=\"examplePasswordGrid\"\n                        id=\"examplePasswordGrid\"\n                        placeholder={messages['forms.password']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={12}>\n                    <FormGroup>\n                      <Label for=\"exampleAddressGrid\">\n                        <IntlMessages id=\"forms.address\" />\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"exampleAddressGrid\"\n                        id=\"exampleAddressGrid\"\n                        placeholder={messages['forms.address']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={12}>\n                    <FormGroup>\n                      <Label for=\"exampleAddress2Grid\">\n                        <IntlMessages id=\"forms.address2\" />\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"exampleAddress2Grid\"\n                        id=\"exampleAddress2Grid\"\n                        placeholder={messages['forms.address']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={6}>\n                    <FormGroup>\n                      <Label for=\"exampleEmailGrid\">\n                        <IntlMessages id=\"forms.city\" />\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"exampleTextGrid\"\n                        id=\"exampleTextGrid\"\n                        placeholder={messages['forms.city']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={4}>\n                    <FormGroup>\n                      <Label>\n                        <IntlMessages id=\"forms.state\" />\n                      </Label>\n                      <Input type=\"select\">\n                        <option>Option 1</option>\n                        <option>Option 2</option>\n                        <option>Option 3</option>\n                        <option>Option 4</option>\n                        <option>Option 5</option>\n                      </Input>\n                    </FormGroup>\n                  </Colxx>\n\n                  <Colxx sm={2}>\n                    <FormGroup>\n                      <Label for=\"exampleZipGrid\">\n                        <IntlMessages id=\"forms.zip\" />\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"exampleZipGrid\"\n                        id=\"exampleZipGrid\"\n                        placeholder={messages['forms.zip']}\n                      />\n                    </FormGroup>\n                  </Colxx>\n                </FormGroup>\n\n                <Button color=\"primary\">\n                  <IntlMessages id=\"forms.signup\" />\n                </Button>\n              </Form>\n            </CardBody>\n          </Card>\n        </Colxx>\n      </Row>\n    </>\n  );\n};\n\nexport default injectIntl(FormLayoutsUi);\n","/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/');\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n"],"sourceRoot":""}